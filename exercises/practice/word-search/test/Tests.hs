{-# LANGUAGE FlexibleContexts #-}

import Test.Hspec        (Spec, it, shouldMatchList)
import Test.Hspec.Runner (configFastFail, defaultConfig, hspecWith)

import WordSearch (wordSearch)

main :: IO ()
main = hspecWith defaultConfig {configFastFail = True} specs

specs :: Spec
specs = do

-- Generated by piping http://github.com/exercism/problem-specifications/exercises/word-search/canonical-data.json
-- into the following jq script:
-- jq -r '.cases[] | "    it \""+.description+"\" $",
--                   "      wordSearch [\""+(.input["grid"] | join("\",\""))+"\"]",
--                   "                 [\""+(.input["wordsToSearchFor"] | join("\",\""))+"\"]",
--                   "      `shouldMatchList` [(\""+(.expected | to_entries |
--                                                     map(if .value == null then "\(.key)\", Nothing"
--                                                         else "\(.key)\", Just ((\(.value.start.column),\(.value.start.row)),(\(.value.end.column),\(.value.end.row)))" end
--                                                  ) | join(")\n                        ,(\""))+")]\n"'

    it "Should accept an initial game grid and a target search word" $
      wordSearch ["jefblpepre"]
                 ["clojure"]
      `shouldMatchList` [("clojure", Nothing)]

    it "Should locate one word written left to right" $
      wordSearch ["clojurermt"]
                 ["clojure"]
      `shouldMatchList` [("clojure", Just ((1,1),(7,1)))]

    it "Should locate the same word written left to right in a different position" $
      wordSearch ["mtclojurer"]
                 ["clojure"]
      `shouldMatchList` [("clojure", Just ((3,1),(9,1)))]

    it "Should locate a different left to right word" $
      wordSearch ["coffeelplx"]
                 ["coffee"]
      `shouldMatchList` [("coffee", Just ((1,1),(6,1)))]

    it "Should locate that different left to right word in a different position" $
      wordSearch ["xcoffeezlp"]
                 ["coffee"]
      `shouldMatchList` [("coffee", Just ((2,1),(7,1)))]

    it "Should locate a left to right word in two line grid" $
      wordSearch ["jefblpepre","tclojurerm"]
                 ["clojure"]
      `shouldMatchList` [("clojure", Just ((2,2),(8,2)))]

    it "Should locate a left to right word in three line grid" $
      wordSearch ["camdcimgtc","jefblpepre","clojurermt"]
                 ["clojure"]
      `shouldMatchList` [("clojure", Just ((1,3),(7,3)))]

    it "Should locate a left to right word in ten line grid" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","jalaycalmp","clojurermt"]
                 ["clojure"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))]

    it "Should locate that left to right word in a different position in a ten line grid" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","clojurermt","jalaycalmp"]
                 ["clojure"]
      `shouldMatchList` [("clojure", Just ((1,9),(7,9)))]

    it "Should locate a different left to right word in a ten line grid" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","fortranftw","alxhpburyi","clojurermt","jalaycalmp"]
                 ["fortran"]
      `shouldMatchList` [("fortran", Just ((1,7),(7,7)))]

    it "Should locate multiple words" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","fortranftw","alxhpburyi","jalaycalmp","clojurermt"]
                 ["fortran","clojure"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))
                        ,("fortran", Just ((1,7),(7,7)))]

    it "Should locate a single word written right to left" $
      wordSearch ["rixilelhrs"]
                 ["elixir"]
      `shouldMatchList` [("elixir", Just ((6,1),(1,1)))]

    it "Should locate multiple words written in different horizontal directions" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","jalaycalmp","clojurermt"]
                 ["elixir","clojure"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))
                        ,("elixir", Just ((6,5),(1,5)))]

    it "Should locate words written top to bottom" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","jalaycalmp","clojurermt"]
                 ["clojure","elixir","ecmascript"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))
                        ,("elixir", Just ((6,5),(1,5)))
                        ,("ecmascript", Just ((10,1),(10,10)))]

    it "Should locate words written bottom to top" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","jalaycalmp","clojurermt"]
                 ["clojure","elixir","ecmascript","rust"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))
                        ,("elixir", Just ((6,5),(1,5)))
                        ,("ecmascript", Just ((10,1),(10,10)))
                        ,("rust", Just ((9,5),(9,2)))]

    it "Should locate words written top left to bottom right" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","jalaycalmp","clojurermt"]
                 ["clojure","elixir","ecmascript","rust","java"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))
                        ,("elixir", Just ((6,5),(1,5)))
                        ,("ecmascript", Just ((10,1),(10,10)))
                        ,("rust", Just ((9,5),(9,2)))
                        ,("java", Just ((1,1),(4,4)))]

    it "Should locate words written bottom right to top left" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","jalaycalmp","clojurermt"]
                 ["clojure","elixir","ecmascript","rust","java","lua"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))
                        ,("elixir", Just ((6,5),(1,5)))
                        ,("ecmascript", Just ((10,1),(10,10)))
                        ,("rust", Just ((9,5),(9,2)))
                        ,("java", Just ((1,1),(4,4)))
                        ,("lua", Just ((8,9),(6,7)))]

    it "Should locate words written bottom left to top right" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","jalaycalmp","clojurermt"]
                 ["clojure","elixir","ecmascript","rust","java","lua","lisp"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))
                        ,("elixir", Just ((6,5),(1,5)))
                        ,("ecmascript", Just ((10,1),(10,10)))
                        ,("rust", Just ((9,5),(9,2)))
                        ,("java", Just ((1,1),(4,4)))
                        ,("lua", Just ((8,9),(6,7)))
                        ,("lisp", Just ((3,6),(6,3)))]

    it "Should locate words written top right to bottom left" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","jalaycalmp","clojurermt"]
                 ["clojure","elixir","ecmascript","rust","java","lua","lisp","ruby"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))
                        ,("elixir", Just ((6,5),(1,5)))
                        ,("ecmascript", Just ((10,1),(10,10)))
                        ,("rust", Just ((9,5),(9,2)))
                        ,("java", Just ((1,1),(4,4)))
                        ,("lua", Just ((8,9),(6,7)))
                        ,("lisp", Just ((3,6),(6,3)))
                        ,("ruby", Just ((8,6),(5,9)))]

    it "Should fail to locate a word that is not in the puzzle" $
      wordSearch ["jefblpepre","camdcimgtc","oivokprjsm","pbwasqroua","rixilelhrs","wolcqlirpc","screeaumgr","alxhpburyi","jalaycalmp","clojurermt"]
                 ["clojure","elixir","ecmascript","rust","java","lua","lisp","ruby","haskell"]
      `shouldMatchList` [("clojure", Just ((1,10),(7,10)))
                        ,("elixir", Just ((6,5),(1,5)))
                        ,("ecmascript", Just ((10,1),(10,10)))
                        ,("rust", Just ((9,5),(9,2)))
                        ,("java", Just ((1,1),(4,4)))
                        ,("lua", Just ((8,9),(6,7)))
                        ,("lisp", Just ((3,6),(6,3)))
                        ,("ruby", Just ((8,6),(5,9)))
                        ,("haskell", Nothing)]

    it "Should fail to locate words that are not on horizontal, vertical, or diagonal lines" $
      wordSearch ["abc","def"]
                 ["aef","ced","abf","cbd"]
      `shouldMatchList` [("aef", Nothing)
                        ,("ced", Nothing)
                        ,("abf", Nothing)
                        ,("cbd", Nothing)]

    it "Should not concatenate different lines to find a horizontal word" $
      wordSearch ["abceli","xirdfg"]
                 ["elixir"]
      `shouldMatchList` [("elixir", Nothing)]

    it "Should not wrap around horizontally to find a word" $
      wordSearch ["silabcdefp"]
                 ["lisp"]
      `shouldMatchList` [("lisp", Nothing)]

    it "Should not wrap around vertically to find a word" $
      wordSearch ["s","u","r","a","b","c","t"]
                 ["rust"]
      `shouldMatchList` [("rust", Nothing)]
